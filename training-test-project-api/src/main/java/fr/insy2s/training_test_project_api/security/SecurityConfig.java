package fr.insy2s.training_test_project_api.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
@EnableWebSecurity
public class SecurityConfig implements WebMvcConfigurer {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .csrf(AbstractHttpConfigurer::disable) // D√©sactiver CSRF pour les tests
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("GET", "/api/products/**").permitAll() // ‚úÖ Tout le monde peut voir les produits
                        .requestMatchers("GET", "/api/categories/**").permitAll() // ‚úÖ Tout le monde peut voir les cat√©gories
                        .requestMatchers("POST", "/api/products/**").hasAnyRole("VENDOR", "ADMIN") // ‚ûï Ajouter produit
                        .requestMatchers("PUT", "/api/products/**").hasAnyRole("VENDOR", "ADMIN") // ‚úèÔ∏è Modifier produit
                        .requestMatchers("DELETE", "/api/products/**").hasAnyRole("VENDOR", "ADMIN") // ‚ùå Supprimer produit
                        .requestMatchers("/api/users/**").hasRole("ADMIN") // üë§ Admin g√®re les utilisateurs
                        .requestMatchers("/api/auth/login").permitAll() // Autoriser CORS pour /api/auth/login
                        .anyRequest().authenticated() // üîê Tout le reste n√©cessite une authentification
                )
                .httpBasic(Customizer.withDefaults()); // Basic Auth

        return http.build();
    }

    @Bean
    public UserDetailsService userDetailsService() {
        UserDetails user = User.withUsername("user")
                .password("{noop}userpass") // Noop = pas de hashage (pour test)
                .roles("USER") // üîç Peut voir les produits
                .build();

        UserDetails vendor = User.withUsername("vendor")
                .password("{noop}vendorpass")
                .roles("VENDOR") // ‚ûï Peut g√©rer les produits
                .build();

        UserDetails admin = User.withUsername("admin")
                .password("{noop}adminpass")
                .roles("ADMIN") // üëë Peut tout faire
                .build();

        return new InMemoryUserDetailsManager(user, vendor, admin);
    }

    // Configuration CORS
    @Override
    public void addCorsMappings(CorsRegistry registry) {
        registry.addMapping("/**")  // Appliquer CORS sur tous les endpoints
                .allowedOrigins("http://localhost:5173", "http://anotherdomain.com")  // Ajouter les domaines autoris√©s (pas de "*")
                .allowCredentials(true)  // Autoriser les cookies
                .allowedMethods("GET", "POST", "PUT", "DELETE", "OPTIONS")  // Ajouter les m√©thodes autoris√©es
                .allowedHeaders("*") ; // Ajouter les en-t√™tes autoris√©s
                //.maxAge(3600);  // Cache les r√©sultats CORS pour 1 heure
    }
}
